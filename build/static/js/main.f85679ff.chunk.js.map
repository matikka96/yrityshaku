{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","baseUrl","payload","totalResults","maxResults","resultsFrom","companyRegistrationFrom","streetAddressPostCode","registeredOffice","result","loadingData","loadData","setState","axios","get","params","then","csv","data","results","keys","Object","join","forEach","e","values","element","document","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","resetParams","catch","err","alert","this","className","htmlFor","type","id","placeholder","value","onChange","target","disabled","onClick","length","role","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.f85679ff.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.css\";\n\nexport default class App extends Component {\n  state = {\n    baseUrl: \"http://avoindata.prh.fi/bis/v1\",\n    payload: {\n      totalResults: \"true\",\n      maxResults: \"1000\",\n      resultsFrom: \"0\",\n      companyRegistrationFrom: \"2014-02-28\"\n    },\n    streetAddressPostCode: \"\",\n    registeredOffice: \"\",\n    result: null,\n    loadingData: false\n  };\n\n  loadData = () => {\n    let { baseUrl, payload, streetAddressPostCode, registeredOffice } = this.state;\n    if (streetAddressPostCode !== \"\") {\n      payload.streetAddressPostCode = streetAddressPostCode;\n    }\n    if (registeredOffice !== \"\") {\n      payload.registeredOffice = registeredOffice;\n    }\n    this.setState({ loadingData: true });\n    axios\n      .get(baseUrl, { params: payload })\n      .then(result => {\n        // this.setState({ result: result.data.results });\n        let csv = \"\";\n        let data = result.data.results;\n        let keys = Object.keys(data[0]).join();\n        csv += keys + \"\\n\";\n        data.forEach(e => {\n          csv += Object.values(e).join() + \"\\n\";\n        });\n        var element = document.createElement(\"a\");\n        element.setAttribute(\n          \"href\",\n          \"data:text/plain;charset=utf-8,\" + encodeURIComponent(csv)\n        );\n        element.setAttribute(\n          \"download\",\n          `yritykset${registeredOffice ? `-${registeredOffice}` : \"\"}${\n            streetAddressPostCode ? `-${streetAddressPostCode}` : \"\"\n          }.csv`\n        );\n        element.style.display = \"none\";\n        document.body.appendChild(element);\n        element.click();\n        document.body.removeChild(element);\n      })\n      .then(this.resetParams)\n      .catch(err => {\n        this.setState({ loadingData: false }, () =>\n          alert(`Väärin syötetyt parametrit. \\n ${err}`)\n        );\n      });\n  };\n\n  resetParams = () => {\n    this.setState({\n      registeredOffice: \"\",\n      streetAddressPostCode: \"\",\n      loadingData: false\n    });\n  };\n\n  render() {\n    const { streetAddressPostCode, registeredOffice } = this.state;\n    return (\n      <div className=\"bg-secondary\">\n        <div className=\"container\">\n          <div className=\"d-flex align-items-center justify-content-center min-vh-100\">\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <h4 className=\"card-title\">Yrityshaku</h4>\n                <div>\n                  <div className=\"form-row\">\n                    <div className=\"form-group col-sm-6\">\n                      <label htmlFor=\"registered-office\">Kotipaikka</label>\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"registered-office\"\n                        placeholder=\"esim. Lappeenranta\"\n                        value={this.state.registeredOffice}\n                        onChange={e =>\n                          this.setState({ registeredOffice: e.target.value })\n                        }\n                      ></input>\n                    </div>\n                    <div className=\"form-group col-sm-6\">\n                      <label htmlFor=\"post-code\">Postinumero</label>\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"post-code\"\n                        placeholder=\"esim. 53850\"\n                        value={this.state.streetAddressPostCode}\n                        onChange={e =>\n                          this.setState({ streetAddressPostCode: e.target.value })\n                        }\n                      ></input>\n                    </div>\n                  </div>\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-outline-secondary\"\n                    disabled={\n                      this.state.registeredOffice === \"\" &&\n                      this.state.streetAddressPostCode === \"\"\n                        ? true\n                        : false\n                    }\n                    onClick={this.resetParams}\n                  >\n                    Tyhjennä\n                  </button>\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-primary float-right\"\n                    disabled={\n                      registeredOffice.length < 3 && streetAddressPostCode.length !== 5\n                        ? true\n                        : false\n                    }\n                    onClick={this.loadData}\n                  >\n                    {this.state.loadingData ? (\n                      <div\n                        className=\"spinner-border spinner-border-sm mr-2\"\n                        role=\"status\"\n                      >\n                        <span className=\"sr-only\">Loading...</span>\n                      </div>\n                    ) : null}\n                    Lataa yritystiedot\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}