{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","baseUrl","payload","totalResults","maxResults","resultsFrom","companyRegistrationFrom","loadingData","streetAddressPostCode","registeredOffice","businessLineCode","showModal","currentResults","fileFormat","saveToCsv","dataArray","csv","data","keys","Object","join","forEach","e","values","element","document","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","saveToXlsx","ws","XLSX","utils","json_to_sheet","wb","book_new","book_append_sheet","writeFile","loadData","assign","setState","axios","get","params","then","a","result","results","console","log","i","concat","resetParams","catch","err","alert","this","className","Modal","show","onHide","dialogClassName","Header","closeButton","Title","Body","href","target","rel","width","onClick","xmlns","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","cx","cy","r","d","x1","y1","x2","y2","disabled","htmlFor","type","id","placeholder","value","onChange","isNaN","length","min","max","name","checked","transitionDuration","role","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.19f52f87.chunk.js","sourcesContent":["import axios from \"axios\";\nimport React, { Component } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport XLSX from \"xlsx\";\n\nexport default class App extends Component {\n  state = {\n    baseUrl: \"http://avoindata.prh.fi/bis/v1\",\n    payload: {\n      totalResults: \"true\",\n      maxResults: \"1000\",\n      resultsFrom: \"0\",\n      companyRegistrationFrom: \"2014-02-28\",\n    },\n    loadingData: false,\n    streetAddressPostCode: \"\",\n    registeredOffice: \"\",\n    businessLineCode: \"\",\n    showModal: false,\n    totalResults: null,\n    currentResults: null,\n    fileFormat: \"xlsx\",\n  };\n\n  // Saving data array as csv\n  saveToCsv = (dataArray) => {\n    let csv = \"\";\n    let data = dataArray;\n    let keys = Object.keys(data[0]).join();\n    csv += keys + \"\\n\";\n    data.forEach((e) => {\n      csv += Object.values(e).join() + \"\\n\";\n    });\n    var element = document.createElement(\"a\");\n    element.setAttribute(\"href\", \"data:text/plain;charset=utf-8,\" + encodeURIComponent(csv));\n    element.setAttribute(\n      \"download\",\n      `Yritykset${this.state.registeredOffice ? `-${this.state.registeredOffice}` : \"\"}${\n        this.state.streetAddressPostCode ? `-${this.state.streetAddressPostCode}` : \"\"\n      }${this.state.businessLineCode ? `-${this.state.businessLineCode}` : \"\"}.csv`\n    );\n    element.style.display = \"none\";\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n  };\n\n  // Saving data array as xlsx\n  saveToXlsx = (dataArray) => {\n    var ws = XLSX.utils.json_to_sheet(dataArray);\n    var wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, \"Yritystiedot\");\n    XLSX.writeFile(\n      wb,\n      `Yritykset${this.state.registeredOffice ? `-${this.state.registeredOffice}` : \"\"}${\n        this.state.streetAddressPostCode ? `-${this.state.streetAddressPostCode}` : \"\"\n      }${this.state.businessLineCode ? `-${this.state.businessLineCode}` : \"\"}.xlsx`\n    );\n  };\n\n  // Loading raw data from the API\n  loadData = () => {\n    let { baseUrl, streetAddressPostCode, registeredOffice, businessLineCode } = this.state;\n    let payload = Object.assign({}, this.state.payload);\n    if (streetAddressPostCode !== \"\") {\n      payload.streetAddressPostCode = streetAddressPostCode;\n    }\n    if (registeredOffice !== \"\") {\n      payload.registeredOffice = registeredOffice;\n    }\n    if (businessLineCode !== \"\") {\n      payload.businessLineCode = businessLineCode;\n    }\n    this.setState({ loadingData: true });\n    axios\n      .get(baseUrl, { params: payload })\n      .then(async (result) => {\n        let totalResults = result.data.totalResults;\n        this.setState({ totalResults });\n        var dataArray = result.data.results;\n        console.log(totalResults);\n        if (totalResults > 1000) {\n          for (let i = 1000; i < totalResults; i += 1000) {\n            this.setState({ currentResults: i });\n            payload.resultsFrom = i;\n            await axios.get(baseUrl, { params: payload }).then((result) => {\n              dataArray = dataArray.concat(result.data.results);\n            });\n          }\n        }\n        if (this.state.fileFormat === \"csv\") this.saveToCsv(dataArray);\n        else this.saveToXlsx(dataArray);\n      })\n      .then(this.resetParams)\n      .catch((err) => {\n        this.setState({ loadingData: false }, () => {\n          alert(\"Ei tuloksia näillä parametreilla.\");\n          console.log(err);\n        });\n      });\n  };\n\n  // Function to reset app\n  resetParams = () => {\n    this.setState({\n      registeredOffice: \"\",\n      streetAddressPostCode: \"\",\n      businessLineCode: \"\",\n      loadingData: false,\n      totalResults: null,\n      currentResults: null,\n      fileFormat: \"xlsx\",\n    });\n  };\n\n  render() {\n    const { streetAddressPostCode, registeredOffice, businessLineCode } = this.state;\n    return (\n      <div className=\"container\">\n        <Modal\n          show={this.state.showModal}\n          onHide={() => this.setState({ showModal: false })}\n          dialogClassName=\"my-2\"\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>Kuvaus</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <strong>Mitä tämä työkalu tekee?</strong>\n            <p>\n              Työkalun tarkoituksena on hakea yrityksiä ja niiden tietoja toimialan ja\n              maantieteellisen sijainnin perusteella. Hakutulos on ladattavissa CSV tai XLSX\n              formaateissa. Sisältö haetaan{\" \"}\n              <a\n                href=\"https://avoindata.prh.fi/index.html\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                PRH\n              </a>\n              :n avoimen datan rajapinnasta.\n            </p>\n            <strong>Käyttöohjeet</strong>\n            <p className=\"m-0\">Haku voidaan suorittaa seuraavia parametreja hyödyntäen:</p>\n            <ul>\n              <li>\n                Kotipaikka <span className=\"ml-2 small\">Oltava tarkka vastine!</span>\n              </li>\n              <li>\n                Toimiala\n                <a\n                  className=\"ml-2 small\"\n                  href=\"http://www.stat.fi/meta/luokitukset/toimiala/001-2008/index.html\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  lisätietoa\n                </a>\n              </li>\n              <li>\n                Postinumero\n                <a\n                  className=\"ml-2 small\"\n                  href=\"https://fi.wikipedia.org/wiki/Luettelo_Suomen_postinumeroista_kunnittain\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  lisätietoa\n                </a>\n              </li>\n            </ul>\n            <p>\n              Vähintään yksi parametri on syötettävä, mutta useampaakin voi käyttää samanaikaisesti.\n              Jos parametri(t) on syötetty puutteellisesti, sovellus ilmoittaa asiasta.\n            </p>\n            <a href=\"https://matvei.xyz\" target=\"_blank\" rel=\"noopener noreferrer\">\n              Suunnittelu ja toteutus\n            </a>\n            <span> | </span>\n            <a\n              href=\"https://github.com/matikka96/yrityshaku\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              GitHub\n            </a>\n          </Modal.Body>\n        </Modal>\n\n        {/* min-vh-100 */}\n        <div className=\"d-flex align-items-center justify-content-center py-3 main-element\">\n          <div className=\"card\" style={{ width: \"30rem\" }}>\n            <h4 className=\"card-header\">\n              Yrityshaku\n              <button\n                className=\"btn float-right p-0\"\n                onClick={() => this.setState({ showModal: true })}\n              >\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  width=\"24\"\n                  height=\"24\"\n                  viewBox=\"0 0 24 24\"\n                  fill=\"none\"\n                  stroke=\"#000000\"\n                  strokeWidth=\"2\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                >\n                  <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n                  <path d=\"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3\"></path>\n                  <line x1=\"12\" y1=\"17\" x2=\"12\" y2=\"17\"></line>\n                </svg>\n              </button>\n            </h4>\n\n            <div className=\"card-body\">\n              <fieldset disabled={this.state.loadingData ? true : false}>\n                <form>\n                  <div className=\"form-row\">\n                    <div className=\"form-group col\">\n                      <label htmlFor=\"registered-office\">Kotipaikka</label>\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"registered-office\"\n                        placeholder=\"esim. Lappeenranta\"\n                        value={this.state.registeredOffice}\n                        onChange={(e) =>\n                          this.setState({\n                            registeredOffice: e.target.value,\n                          })\n                        }\n                      ></input>\n                    </div>\n                  </div>\n                  <div className=\"form-row\">\n                    <div className=\"form-group col-sm-6\">\n                      <label htmlFor=\"registered-office\">Toimialakoodi</label>\n                      <a\n                        className=\"ml-2 small\"\n                        href=\"http://www.stat.fi/meta/luokitukset/toimiala/001-2008/index.html\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                      >\n                        lisätietoa\n                      </a>\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"registered-office\"\n                        placeholder=\"esim. 07\"\n                        value={this.state.businessLineCode}\n                        onChange={(e) =>\n                          !isNaN(e.target.value) && e.target.value.length < 6\n                            ? this.setState({\n                                businessLineCode: e.target.value,\n                              })\n                            : null\n                        }\n                      ></input>\n                    </div>\n                    <div className=\"form-group col-sm-6\">\n                      <label htmlFor=\"post-code\">Postinumero</label>\n                      <a\n                        className=\"ml-2 small\"\n                        href=\"https://fi.wikipedia.org/wiki/Luettelo_Suomen_postinumeroista_kunnittain\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                      >\n                        lisätietoa\n                      </a>\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"post-code\"\n                        placeholder=\"esim. 53850\"\n                        value={this.state.streetAddressPostCode}\n                        min=\"9999\"\n                        max=\"99999\"\n                        onChange={(e) =>\n                          !isNaN(e.target.value) && e.target.value.length < 6\n                            ? this.setState({\n                                streetAddressPostCode: e.target.value,\n                              })\n                            : null\n                        }\n                      ></input>\n                    </div>\n                  </div>\n\n                  <div className=\"row\">\n                    <p className=\"col\">Tallennusmuoto</p>\n                    <div className=\"col\">\n                      <div className=\"form-check form-check-inline\">\n                        <input\n                          className=\"form-check-input\"\n                          type=\"radio\"\n                          name=\"inlineRadioOptions\"\n                          id=\"xlsx\"\n                          value=\"xlsx\"\n                          onChange={(e) => this.setState({ fileFormat: e.target.value })}\n                          checked={this.state.fileFormat === \"xlsx\" ? true : false}\n                        />\n                        <label className=\"form-check-label\" htmlFor=\"xlsx\">\n                          xlsx\n                        </label>\n                      </div>\n                      <div className=\"form-check form-check-inline\">\n                        <input\n                          className=\"form-check-input\"\n                          type=\"radio\"\n                          name=\"inlineRadioOptions\"\n                          id=\"csv\"\n                          value=\"csv\"\n                          onChange={(e) => this.setState({ fileFormat: e.target.value })}\n                          checked={this.state.fileFormat === \"csv\" ? true : false}\n                        />\n                        <label className=\"form-check-label\" htmlFor=\"csv\">\n                          csv\n                        </label>\n                      </div>\n                    </div>\n                  </div>\n                </form>\n              </fieldset>\n\n              <div\n                className=\"progress transition-duration\"\n                style={{\n                  transitionDuration: \"0.2s\",\n                  height: this.state.totalResults && this.state.currentResults ? null : \"0px\",\n                }}\n              >\n                <div\n                  className=\"progress-bar progress-bar-striped progress-bar-animated\"\n                  role=\"progressbar\"\n                  style={{\n                    width: `${(this.state.currentResults * 100) / this.state.totalResults}%`,\n                  }}\n                ></div>\n              </div>\n            </div>\n\n            <div className=\"card-footer\">\n              <button\n                type=\"button\"\n                className=\"btn btn-outline-secondary\"\n                disabled={\n                  this.state.registeredOffice === \"\" &&\n                  this.state.streetAddressPostCode === \"\" &&\n                  this.state.businessLineCode === \"\"\n                    ? true\n                    : false\n                }\n                onClick={this.resetParams}\n              >\n                Tyhjennä\n              </button>\n\n              <button\n                type=\"button\"\n                className=\"btn btn-dark float-right\"\n                disabled={\n                  registeredOffice.length < 3 &&\n                  streetAddressPostCode.length !== 5 &&\n                  businessLineCode.length !== 2\n                    ? true\n                    : false\n                }\n                onClick={this.loadData}\n              >\n                {this.state.loadingData ? (\n                  <div className=\"spinner-border spinner-border-sm mr-2\" role=\"status\">\n                    <span className=\"sr-only\">Loading...</span>\n                  </div>\n                ) : null}\n                {this.state.loadingData ? \"Valmistellaan tiedostoa\" : \"Lataa yritystiedot\"}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}